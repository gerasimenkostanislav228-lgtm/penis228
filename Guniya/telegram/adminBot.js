// src/telegram/adminBot.js
import TelegramBot      from 'node-telegram-bot-api';
import { spawn, spawnSync } from 'child_process';
import path             from 'path';
import { fileURLToPath } from 'url';
import fs               from 'fs';
import { loadConfig }   from '../config/configManager.js';
import axios from 'axios';
import { SocksProxyAgent } from 'socks-proxy-agent';
import { loadProxies, addProxy, saveProxies } from '../config/proxyManager.js';

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ¬´–∂–∏–≤–æ—Å—Ç—ñ¬ª –ø—Ä–æ–∫—Å—ñ –∑ –∂–æ—Ä—Å—Ç–∫–∏–º 1—Å-—Ç–∞–π–º–∞—É—Ç–æ–º
async function isProxyAlive(proxyUrl) {
    const controller = new AbortController();
    const timeoutId  = setTimeout(() => controller.abort(), 1000);

    try {
        const agent = new SocksProxyAgent(proxyUrl, { timeout: 1000 });
        await axios.get('http://ifconfig.me/ip', {
            httpAgent:  agent,
            httpsAgent: agent,
            signal:     controller.signal,
        });
        return true;
    } catch {
        return false;
    } finally {
        clearTimeout(timeoutId);
    }
}


// ‚îÄ‚îÄ‚îÄ Settings ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const TOKEN = '7522596224:AAE1_1CpOFnqc3IRS3KAnVUxTTEIPOIgcV0';
const OWNER_ID = 477547206 ;

// ‚îÄ‚îÄ‚îÄ Paths ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const baseDir   = path.join(__dirname, '..'); // src/
const corePath  = path.join(baseDir, 'index.js');

// ‚îÄ‚îÄ‚îÄ Telegram init ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const bot    = new TelegramBot(TOKEN, { polling: true });
const sendDM = (msg, opts) => bot.sendMessage(OWNER_ID, msg, opts).catch(() => {});
const isAdmin = id => id === OWNER_ID;

// ‚îÄ‚îÄ‚îÄ Core process management ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
let coreProc = null;
function killProcessTree(pid) {
    if (!pid) return;
    if (process.platform === 'win32') {
        try { spawnSync('taskkill', ['/PID', pid, '/T', '/F']); } catch {};
    } else {
        try { process.kill(-pid, 'SIGKILL'); } catch {};
    }
}
function startCore() {
    if (!fs.existsSync(corePath)) {
        sendDM(`‚õîÔ∏è core –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${corePath}`);
        return;
    }
    if (coreProc && !coreProc.killed) killProcessTree(coreProc.pid);
    coreProc = spawn(process.execPath, [corePath], {
        cwd: baseDir,
        detached: false,
        stdio: 'inherit'
    });
    sendDM(`‚úÖ core –∑–∞–ø—É—â–µ–Ω–æ (pid ${coreProc.pid})`);
    coreProc.on('exit', code => sendDM(`‚ö†Ô∏è core –∑–∞–≤–µ—Ä—à–∏–≤—Å—è (code ${code})`));
}
startCore();
sendDM('adminBot –∑–∞–ø—É—â–µ–Ω–∏–π, —á–µ–∫–∞—é –∫–æ–º–∞–Ω–¥‚Ä¶');

// ‚îÄ‚îÄ‚îÄ BOT COMMANDS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// /start
// /start
bot.onText(/^\/start$/i, msg => {
    if (!isAdmin(msg.from.id)) return;
    sendDM('–î–ª—è –¥–æ–≤—ñ–¥–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:', {
        reply_markup: {
            keyboard: [['/help']],
            resize_keyboard: true
        }
    });
});


// /list
bot.onText(/^\/list$/i, msg => {
    if (!isAdmin(msg.from.id)) return;
    const keys = Object.keys(loadConfig());
    sendDM(keys.length ? keys.join('\n') : '‚õîÔ∏è —Å—Ü–µ–Ω–∞—Ä—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ');
});

// /get KEY
bot.onText(/^\/get (\S+)$/i, (msg, [, key]) => {
    if (!isAdmin(msg.from.id)) return;
    const data = loadConfig()[key];
    sendDM(
        data ? '```' + JSON.stringify(data, null, 2) + '```' : `‚õîÔ∏è —Å—Ü–µ–Ω–∞—Ä—ñ–π "${key}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`,
        { parse_mode: 'Markdown' }
    );
});

// /set KEY\nJSON
bot.onText(/^\/set (\S+)\n([\s\S]+)$/i, (msg, [, key, json]) => {
    if (!isAdmin(msg.from.id)) return;
    let obj;
    try { obj = JSON.parse(json); } catch {
        return sendDM('‚õîÔ∏è JSON –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π');
    }
    const cfg = loadConfig();
    cfg[key] = obj;
    import('../config/configManager.js').then(m => m.saveConfig(cfg));
    sendDM(`‚úÖ —Å—Ü–µ–Ω–∞—Ä—ñ–π "${key}" –∑–±–µ—Ä–µ–∂–µ–Ω–æ`);
});

// /delete KEY
bot.onText(/^\/delete (\S+)$/i, (msg, [, key]) => {
    if (!isAdmin(msg.from.id)) return;
    const cfg = loadConfig();
    if (!cfg[key]) return sendDM(`‚õîÔ∏è —Å—Ü–µ–Ω–∞—Ä—ñ–π "${key}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    delete cfg[key];
    import('../config/configManager.js').then(m => m.saveConfig(cfg));
    sendDM(`‚úÖ —Å—Ü–µ–Ω–∞—Ä—ñ–π "${key}" –≤–∏–¥–∞–ª–µ–Ω–æ`);
});


// /checkallproxy ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Å—ñ –ø—Ä–æ–∫—Å—ñ —Ç–∞ –≤–∏–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
bot.onText(/^\/checkallproxy$/i, async msg => {
    if (!isAdmin(msg.from.id)) return;
    sendDM('üîé –ü–µ—Ä–µ–≤—ñ—Ä—è—é –≤—Å—ñ –ø—Ä–æ–∫—Å—ñ‚Ä¶');

    const results = await Promise.all(
        Object.entries(loadProxies()).map(async ([key, url]) => {
            const ok = await isProxyAlive(url);
            return { key, url, ok };
        })
    );

    const keyboard = results.map(r => [{
        text: `${r.ok ? '‚úÖ' : '‚ùå'} ${r.key}`,
        callback_data: `proxy:${r.key}`
    }]);

    bot.sendMessage(OWNER_ID,
        '–°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å—ñ (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ URL):',
        { reply_markup: { inline_keyboard: keyboard } }
    );
});

// –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async query => {
    if (!query.data?.startsWith('proxy:')) return;
    const key     = query.data.split(':')[1];
    const url     = loadProxies()[key];
    await bot.answerCallbackQuery(query.id);
    sendDM(`üîó ${key}: ${url}`);
});
// /formatproxy RAW ‚Äî –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î IP:port:user:pass ‚Üí socks5://user:pass@IP:port —ñ –Ω–∞–¥—Å–∏–ª–∞—î –≤ DM
bot.onText(/^\/formatproxy\s+(\S+)$/i, (msg, [, raw]) => {
    if (!isAdmin(msg.from.id)) return;

    const parts = raw.split(':');
    if (parts.length !== 4) {
        return sendDM(
            '‚õîÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n' +
            '/formatproxy 130.0.234.165:8000:ps87616:BVCo0wh8BM'
        );
    }

    const [ip, port, user, pass] = parts;
    const formatted = `socks5://${user}:${pass}@${ip}:${port}`;

    sendDM(`üîÑ –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ:\n${formatted}`);
});

// /addproxy RAW ‚Äî –¥–æ–¥–∞—î –ø—Ä–æ–∫—Å—ñ (IP:port:user:pass –∞–±–æ socks5://URI) –ø—ñ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–π flowN
bot.onText(/\/addproxy(?:@\w+)?\s+(.+)/i, async (msg, match) => {
    console.log('[DEBUG] /addproxy called by', msg.from.id, 'match:', match);
    if (!isAdmin(msg.from.id)) {
        console.log('[DEBUG] addproxy ‚Äî non-admin, ignored');
        return;
    }

    const raw = match[1].trim();
    console.log('[DEBUG] raw proxy string:', raw);

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç
    let formatted;
    if (raw.startsWith('socks5://')) {
        formatted = raw;
    } else {
        const parts = raw.split(':');
        if (parts.length !== 4) {
            return sendDM(
                '‚õîÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n' +
                '/addproxy 130.0.234.165:8000:ps87616:BVCo0wh8BM\n' +
                '–∞–±–æ /addproxy socks5://user:pass@ip:port'
            );
        }
        const [ip, port, user, pass] = parts;
        formatted = `socks5://${user}:${pass}@${ip}:${port}`;
    }
    console.log('[DEBUG] formatted proxy:', formatted);

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–ª—é—á flowN
    const proxies = loadProxies();
    const maxIndex = Object.keys(proxies)
        .map(k => {
            const m = k.match(/^flow(\d+)$/);
            return m ? parseInt(m[1], 10) : 0;
        })
        .reduce((a, b) => Math.max(a, b), 0);
    const newKey = `flow${maxIndex + 1}`;
    console.log('[DEBUG] new key will be', newKey);

    // –ó–∞–ø–∏—Å—É—î–º–æ –≤ —Ñ–∞–π–ª
    addProxy(newKey, formatted);
    console.log('[DEBUG] addProxy done');

    sendDM(`‚úÖ –î–æ–¥–∞–Ω–æ –ø—Ä–æ–∫—Å—ñ "${newKey}":\n${formatted}`);
});
// /deleteproxy FLOWKEY ‚Äî –≤–∏–¥–∞–ª—è—î –ø—Ä–æ–∫—Å—ñ —Ç–∞ –ø–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—É—î –ø–æ—Ç–æ–∫–∏
bot.onText(/^\/deleteproxy\s+(\S+)$/i, (msg, [, key]) => {
    if (!isAdmin(msg.from.id)) return;

    // 1) –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –ø—Ä–æ–∫—Å—ñ
    const proxies = loadProxies();
    if (!proxies[key]) {
        return sendDM(`‚õîÔ∏è –ü—Ä–æ–∫—Å—ñ "${key}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    }

    // 2) –í–∏–¥–∞–ª—è—î–º–æ –≤–∫–∞–∑–∞–Ω–∏–π –∫–ª—é—á
    delete proxies[key];

    // 3) –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—É—î–º–æ –∑–∞–ª–∏—à–æ–∫
    const entries = Object.entries(proxies)
        .map(([k, url]) => {
            const m = k.match(/^flow(\d+)$/);
            return m ? [parseInt(m[1],10), url] : null;
        })
        .filter(Boolean)
        .sort((a,b) => a[0] - b[0]);

    const newProxies = {};
    entries.forEach(([_, url], i) => {
        newProxies[`flow${i+1}`] = url;
    });

    // 4) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π –æ–±‚Äô—î–∫—Ç
    saveProxies(newProxies);

    // 5) –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ
    sendDM(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${key} —ñ –ø–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–æ ${entries.length} –ø—Ä–æ–∫—Å—ñ`);
});
// /check KEY ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ core –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
bot.onText(/^\/check\s+(\S+)$/i, (msg, [, key]) => {
    if (!isAdmin(msg.from.id)) return;
    const cfg = loadConfig();
    if (!cfg[key]) return sendDM(`‚õîÔ∏è —Å—Ü–µ–Ω–∞—Ä—ñ–π "${key}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    sendDM(`‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Å—Ü–µ–Ω–∞—Ä—ñ–π "${key}"‚Ä¶`);
    const proc = spawn(process.execPath, [corePath, key], {
        cwd: baseDir,
        stdio: ['ignore', 'pipe', 'pipe']
    });
    let output = '';
    proc.stdout.on('data', chunk => {
        process.stdout.write(chunk);
        output += chunk.toString();
    });
    proc.stderr.on('data', chunk => {
        process.stderr.write(chunk);
        output += chunk.toString();
    });
    proc.on('close', code => {
        const text = output.trim() || `Process exited with code ${code}`;
        sendDM('```' + text + '```', { parse_mode: 'Markdown' });
    });
});

// /getconfig ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π config.json –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
bot.onText(/^\/getconfig$/i, async msg => {
    if (!isAdmin(msg.from.id)) return;

    const filePath = path.join(__dirname, '../config/coins.json');
    try {
        await bot.sendDocument(OWNER_ID,
            fs.createReadStream(filePath),
            {}, // –æ–ø—Ü—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            {
                filename: 'config.json',
                contentType: 'application/json'
            }
        );
    } catch (err) {
        sendDM(`‚õîÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª: ${err.message}`);
    }
});
// /measurement ‚Äî –≤–∏–º—ñ—Ä—è—Ç–∏ —á–∞—Å –æ–¥–Ω–æ–≥–æ –ø–æ–≤–Ω–æ–≥–æ ¬´–∫—Ä—É–≥–∞¬ª core
bot.onText(/^\/measurement$/i, msg => {
    if (!isAdmin(msg.from.id)) return;

    sendDM('‚è≥ –í–∏–º—ñ—Ä—é—é —à–≤–∏–¥–∫—ñ—Å—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä—É–≥–∞‚Ä¶');

    // –∑–∞–ø—É—Å–∫–∞—î–º–æ core –≤ ¬´—Ä–µ–∂–∏–º—ñ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è¬ª
    const proc = spawn(
        process.execPath,
        [corePath],                // ‚Üê –ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —à–ª—è—Ö –¥–æ index.js
        {
            cwd: baseDir,
            env: { ...process.env, MEASURE: '1' },   // –ø—Ä–∞–ø–æ—Ä —á–µ—Ä–µ–∑ ENV
            stdio: ['ignore', 'pipe', 'pipe']
        }
    );


    let output = '';
    proc.stdout.on('data', chunk => output += chunk.toString());
    proc.stderr.on('data', chunk => output += chunk.toString());

    proc.on('close', () => {
        const m = output.match(/MEASURE_TIME\s+([0-9.]+)/);
        if (m) {
            sendDM(`‚ö°Ô∏è –®–≤–∏–¥–∫—ñ—Å—Ç—å: ${parseFloat(m[1]).toFixed(2)} —Å–µ–∫—É–Ω–¥`);
        } else {
            sendDM(
                '‚õîÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —à–≤–∏–¥–∫—ñ—Å—Ç—å (–ª–æ–≥ –Ω–∏–∂—á–µ):\n```' +
                output.trim() + '```',
                { parse_mode: 'Markdown' }
            );
        }
    });
});


// /help ‚Äî –ø–µ—Ä–µ–ª—ñ–∫ –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥ —ñ –∫–æ—Ä–æ—Ç–∫—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è
bot.onText(/^\/help$/i, msg => {
    if (!isAdmin(msg.from.id)) return;
    const helpText = `
‚öôÔ∏è *–ê–¥–º—ñ–Ω-–±–æ—Ç PROJECTX*  
–û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:

/start               ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é  
/list                ‚Äî –ø–µ—Ä–µ–ª—ñ–∫ —É—Å—ñ—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤  
/get <KEY>           ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥ —Å—Ü–µ–Ω–∞—Ä—ñ—é  
/set <KEY>\\n<JSON>  ‚Äî –¥–æ–¥–∞—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ —Å—Ü–µ–Ω–∞—Ä—ñ–π  
/delete <KEY>        ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ü–µ–Ω–∞—Ä—ñ–π  
/check <KEY>         ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å—Ü–µ–Ω–∞—Ä—ñ–π —Ä–∞–∑–æ–≤–æ  
/restart             ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ core
/getconfig           ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª config.json
/help                ‚Äî —Ü—è –¥–æ–≤—ñ–¥–∫–∞  

üåê *–ü—Ä–æ–∫—Å—ñ:*  
/checkallproxy       ‚Äî —Å—Ç–∞—Ç—É—Å —É—Å—ñ—Ö proxy (–∫–Ω–æ–ø–∫–∏)  
/addproxy <RAW>      ‚Äî –¥–æ–¥–∞—Ç–∏ proxy (IP:port:user:pass –∞–±–æ URI)  
/formatproxy <RAW>   ‚Äî –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –≤ socks5://‚Ä¶  
/deleteproxy <flowN> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ proxy —ñ –ø–µ—Ä–µ–Ω—É–º–µ—Ä—É–≤–∞—Ç–∏  
/measurement         ‚Äî –≤–∏–º—ñ—Ä—é—î —à–≤–∏–¥–∫—ñ—Å—Ç—å
`;
    bot.sendMessage(msg.chat.id, helpText, { parse_mode: 'Markdown' });
});

// /restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ core –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
bot.onText(/^\/restart$/i, msg => {
    if (!isAdmin(msg.from.id)) return;
    sendDM('‚ôªÔ∏è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é core...');
    killProcessTree(coreProc && coreProc.pid);
    startCore();
});